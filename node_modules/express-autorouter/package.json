{
  "name": "express-autorouter",
  "version": "0.1.3",
  "description": "Calling controllers without router",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/Shold/express-autorouter.git"
  },
  "keywords": [
    "router",
    "route",
    "controller",
    "express"
  ],
  "author": {
    "name": "Ruslan Baybekov",
    "email": "shold@rambler.ru"
  },
  "license": "MIT",
  "readme": "# express-autorouter\n\n[Express](http://expressjs.com) middleware implements url routing through simple file and folder structure.\n\n## Attention\n\nI've started this project recently - so I may make breaking changes between releases, please check the README for each release for the latest documentation.\n\n### Install\n\n```\nnpm install express-autorouter\n```\n\n### Usage\n\nAdd this line to your `app.js` after all routes but before error handlers. Then routes will override some controllers and methods if needed.\n\n```js\napp.use(require('express-autorouter')('./path/to/controllers/root'));\n```\n\n##### Parameters\n\n* Path to controllers root\n* Controllers files extension (default: `.js`)\n* Index controller (default: `index`)\n* Index method (default: `index`)\n\n##### Controller\n\nControllers must export the object with request-handler functions as its keys.\n\n```js\n//sample controller index.js\nmodule.exports.index = function(req, res, next) {\n    res.send('This method can work for main page request');\n};\nmodule.exports.someothermethod = function(req, res, next) {\n    res.send('This is other method');\n};\n```\n\n### How it works\n\nYou create `controllers` folder in your application root folder\n```\n/projectRoot\n    app.js // <- here including middleware - app.use(require('express-autorouter')('./controllers'));\n    /controllers\n        /somemodule\n            index.js // <- methods: index\n            somecontroller.js // <- methods: somemethod\n        /othermodule\n            othercontroller.js // <- methods: index, othermethod\n        index.js // <- methods: index, contacts\n```\n\nThis structure will create routes:\n\n- `domain.com/somemodule`\n- `domain.com/somemodule/somecontroller/somemethod`\n- `domain.com/othermodule/othercontroller`\n- `domain.com/othermodule/othercontroller/othermethod`\n- `domain.com/`\n- `domain.com/contacts`\n\n##### Why last route is not /index/contacts?\n\nFor example, requested /segment1/segment2/segment3/segment4\n\n* Search controller/method as\n\n```\n/segment1/segment2/segment3 / segment4 / index\n---------------------------   ========   +++++\n         folder              controller  method\n```\n\n* If not found then\n\n```\n/segment1/segment2 / segment3 / segment4\n------------------   ========   +++++\n      folder        controller  method\n```\n\n* If not found then\n\n```\n/segment1/segment2/segment3 / index / segment4\n---------------------------   =====   ++++++++\n         folder             controller  method\n```\n\n* If not found then\n\n```\n/segment1/segment2/segment3/segment4 / index / index\n------------------------------------   =====   +++++\n                 folder             controller method\n```\n\n* If not found then call `next()`\n\n### Mirrors\n\nMirrored routes you can redirect to right routes in standard express routers.\n\n```js\nvar express = require('express'),\n    app = express();\n\n...    \n    \napp.get('/index', function(req, res) { res.redirect(301, '/'); });\napp.get('/index/index', function(req, res) { res.redirect(301, '/'); });\n\napp.use(require('express-autorouter')('./controllers'));\n\napp.use(/* Error Handler */);\n\napp.listen(/* port */);\n\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Shold/express-autorouter/issues"
  },
  "_id": "express-autorouter@0.1.3",
  "dist": {
    "shasum": "03a70570f07b7ac3c79d341bb1cc19e97499e6c6"
  },
  "_from": "express-autorouter@",
  "_resolved": "https://registry.npmjs.org/express-autorouter/-/express-autorouter-0.1.3.tgz"
}
